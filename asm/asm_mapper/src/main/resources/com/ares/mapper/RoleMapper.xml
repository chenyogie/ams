<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ares.mapper.RoleMapper">

    <!--void save(T t);String sn, Long identifying, String name, Integer status-->
    <insert id="save" parameterType="Role">
        INSERT INTO t_role (sn,identifying,name,status,)
         VALUES (#{sn},#{identifying},#{name},#{status})
    </insert>

    <!--void remove(Serializable id);-->
    <delete id="remove" parameterType="long" >
        DELETE FROM t_role WHERE id = #{id}
    </delete>

    <!--void update(T t); ?????-->
    <update id="update" parameterType="Role" >
        UPDATE t_role
        SET sn = #{sn},identifying = #{identifying},name = #{name},status = #{status}
    </update>

    <!--T loadOne(Serializable id);-->
    <select id="loadOne" parameterType="long" resultType="Role" >
        SELECT * FROM t_role WHERE id = #{id}
    </select>

    <!--List<T> loadAll();-->
    <select id="loadAll" resultType="Role" >
        SELECT * FROM t_role
    </select>

    <sql id="roleSql">
        <where>
            <if test="keyWords != null and keyWords != ''">
                AND (sn LIKE concat('%',#{keyWords},'%') or identifying LIKE concat('%',#{keyWords},'%'))
            </if>
        </where>
    </sql>
    <!--实现分页查询-->
    <!--Long queryCount(BaseQuery query);-->
    <select id="queryCount" parameterType="RoleQuery" resultType="long">
        SELECT COUNT(*) FROM t_role
        <include refid="roleSql" />
    </select>

    <!--List<T> query(BaseQuery query);-->

    <resultMap id="pageMap" type="Role" >
        <result property="id" column="id" />
        <result property="sn" column="sn" />
        <result property="identifying" column="identifying" />
        <result property="name" column="name" />
        <result property="status" column="status" />
        <collection property="permissions" javaType="arrayList"
                    ofType="Permission"
                    column="identifying"
                    select="com.ares.mapper.PermissionMapper.loadPermissionByidentifying"

        >
        </collection>
        <collection property="menus" javaType="arrayList"
                    ofType="Menu"
                    column="identifying"
                    select="com.ares.mapper.MenuMapper.loadMenuByidentifying"
        >
        </collection>
    </resultMap>
    <select id="query" parameterType="RoleQuery" resultMap="pageMap">
        SELECT * FROM t_role r
        <include refid="roleSql" />
        limit #{start},#{pageSize}
    </select>

    <!--关联查询-->
    <!--<resultMap id="perMap" type="Role">
        <id property="id" column="r.id" />
        <result property="sn" column="r.sn" />
        <result property="identifying" column="r.identifying" />
        <result property="name" column="r.name" />
        <result property="status" column="r.status" />
        <collection property="permissions" javaType="arrayList"
                    ofType="com.ares.domain.Permission"
                    column="{role_identifying=identifying}"
                    select="com.ares.mapper.RoleMapper.queryRoleAndPermission"
        >
            <result property="identifying" column="rp.pIdentifying" />
            <result property="name" column="rp.pName" />
        </collection>
    </resultMap>
    <select id="queryPermission" parameterType="RoleQuery" resultMap="perMap">
        SELECT * FROM t_role r WHERE identifying = #{queryPer}
    </select>-->
    <resultMap id="RPMap" type="long">
        <result property="role_identifying" column="role_identifying" />
       <!-- <association property="permission_identifying" javaType="Permission"
                     column="permission_identifying"
                     select="com.ares.mapper.RoleMapper.queryPer" />-->
        <collection property="permission_identifying" javaType="Permission"
                ofType="Permission"
                column="{identifying=permission_identifying}"
                select="com.ares.mapper.RoleMapper.queryPer"
            >
            <result property="identifying" column="identifying" />
            <result property="name" column="name" />
        </collection>
    </resultMap>
    <select id="queryRoleAndPermission" resultMap="RPMap">
        SELECT * FROM t_role_permission

         WHERE role_identifying = #{role_identifying};
    </select>
    <resultMap id="PMap" type="Permission" >
        <result property="identifying" column="identifying" />
        <result property="name" column="name" />
    </resultMap>
    <select id="queryPer"  resultType="Permission" >
        SELECT * FROM t_permission p WHERE identifying = #{identifying};
    </select>


    <resultMap id="perMap" type="Role">
        <id property="id" column="r.id" />
        <result property="sn" column="r.sn" />
        <result property="identifying" column="r.identifying" />
        <result property="name" column="r.name" />
        <result property="status" column="r.status" />
        <collection property="permissions" javaType="arrayList"
                    ofType="Permission"

        >
            <result property="identifying" column="pIdentifying" />
            <result property="name" column="pName" />
        </collection>
    </resultMap>
    <select id="queryPermission" parameterType="RoleQuery" resultMap="perMap">
        SELECT r.*,p.identifying pIdentifying,p.name pName FROM t_role r
        LEFT JOIN t_role_permission trp ON r.identifying = trp.role_identifying
        LEFT JOIN t_permission p ON trp.permission_identifying = p.identifying
        WHERE r.identifying = #{queryPer}
    </select>


    <!--
        SELECT
        r.*,
        t.*,
        m.sn msn,
        m.name mName
    FROM
        t_role r LEFT JOIN t_role_menu t ON r.identifying = t.role_id
        LEFT JOIN t_menu m ON m.sn	= t.menu_id
    WHERE
        r.identifying =2
	-->
  <!--  <resultMap id="roleMaps" type="Role" >
        <result property="id" column="id" />
        <result property="sn" column="sn" />
        <result property="identifying" column="identifying" />
        <result property="name" column="name" />
        <result property="status" column="status" />
        <collection property="menus" javaType="arrayList"
                    ofType="Menu"
        >
            <result property="sn" column="msn" />
            <result property="name" column="mName" />
        </collection>
    </resultMap>
    <select id="queryRoleAndMenu" parameterType="long" resultMap="roleMap">
        SELECT r.*,m.sn msn,m.name mName FROM t_role r
        INNER JOIN t_role_menu t ON r.identifying = t.role_id
        INNER JOIN t_menu m ON t.menu_id = m.sn
        WHERE r.identifying = #{identifying}
    </select>-->



    <resultMap id="roleMap" type="Role" >
        <result property="id" column="id" />
        <result property="sn" column="sn" />
        <result property="identifying" column="identifying" />
        <result property="name" column="name" />
        <result property="status" column="status" />
        <collection property="permissions" javaType="arrayList"
                    ofType="Permission"

        >
            <result property="identifying" column="pIdentifying" />
            <result property="name" column="pName" />
        </collection>
        <collection property="menus" javaType="arrayList"
                    ofType="Menu"
        >
            <result property="sn" column="msn" />
            <result property="name" column="mName" />
        </collection>
    </resultMap>
    <select id="queryRoleAndPermissionAndMenu" parameterType="RoleQuery" resultMap="roleMap">
        SELECT r.*,p.identifying pIdentifying,p.name pName,m.sn msn,m.name mName FROM t_role r
        LEFT JOIN t_role_permission trp ON r.identifying = trp.role_identifying
        LEFT JOIN t_permission p ON trp.permission_identifying = p.identifying
        INNER JOIN t_role_menu t ON r.identifying = t.role_id
        INNER JOIN t_menu m ON t.menu_id = m.sn
        WHERE r.identifying = #{queryPer}
    </select>



    <!--void saveRolePermissions(List<Map<String, Long>> rolePermissions);-->
    <insert id="saveRolePermissions" parameterType="arrayList">
        insert into t_role_permission (role_id,permission_id) values
        <foreach collection="list" item="item" separator=",">
            (#{item.roleId},#{item.permissionId})
        </foreach>
    </insert>

    <!--void removeRolePermissions(Serializable id);-->
    <delete id="removeRolePermissions" parameterType="long">
        DELETE from t_role_permission where role_id = #{id}
    </delete>


    <!--void saveRolePermissions(List<Map<String, Long>> rolePermissions);-->
    <insert id="saveRoleMenus" parameterType="arrayList">
        insert into t_role_menu (role_identifying,role_identifying) values
        <foreach collection="list" item="item" separator=",">
            (#{item.role_identifying},#{item.role_identifying})
        </foreach>
    </insert>

    <!--void removeRolePermissions(Serializable id);-->
    <delete id="removeRoleMenus" parameterType="long">
        DELETE from t_role_Menu where role_id = #{id}
    </delete>

</mapper>

